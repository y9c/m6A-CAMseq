name: Create Release Package

on:
  push:
    tags:
      - 'v*' # Trigger on tags starting with 'v', e.g., v1.0, v2.0.1

jobs:
  build-and-pack:
    runs-on: ubuntu-latest
    permissions:
      contents: read # Needed to checkout the repository

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1 # Shallow clone (depth 1) for main repo and submodules
          submodules: 'recursive' # Initialize and update submodules recursively

      - name: Get tag name
        id: get_tag
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Clean unwanted files/folders from submodules
        run: |
          echo "Cleaning submodules..."
          git submodule foreach --recursive '
            echo "Processing submodule: $name at $path"

            # --- General cleaning for ALL submodules ---
            rm -rf docs test tests example examples examples-data test-data .git .github .gitattributes .gitignore .travis.yml .circleci.yml appveyor.yml Jenkinsfile
            true
          '
          echo "Submodule cleaning complete."

      - name: Create package directory
        run: mkdir release_package

      - name: Copy specified project folder to package
        run: |
          echo "Copying specified project folder(s)..."
          if [ -d "external" ]; then
            echo "Copying external/..."
            cp -r external release_package/
          else
            echo "external/ folder not found, skipping."
          fi

      - name: Copy specified root files to package
        run: |
          echo "Copying specified root files..."
          if [ -f "Dockerfile" ]; then cp Dockerfile release_package/; else echo "Dockerfile not found, skipping."; fi
          if [ -f "LICENSE" ]; then cp LICENSE release_package/; else echo "LICENSE not found, skipping."; fi
          if [ -f "Snakefile" ]; then cp Snakefile release_package/; else echo "Snakefile not found, skipping."; fi
          if [ -f "VERSION" ]; then cp VERSION release_package/; else echo "VERSION not found, skipping."; fi
          if [ -f "default.yaml" ]; then cp default.yaml release_package/; else echo "default.yaml not found, skipping."; fi

      - name: Verify contents of package directory
        run: |
          echo "Listing contents of release_package before archiving:"
          ls -R release_package
          echo "--- End of package content listing ---"

      - name: Create archive
        run: |
          cd release_package
          # Updated archive naming: repo_name-tag_name.tar.gz
          tar -czvf ../${{ github.event.repository.name }}-${{ env.TAG_NAME }}.tar.gz .
          # Or for a zip file:
          # zip -r ../${{ github.event.repository.name }}-${{ env.TAG_NAME }}.zip .
          cd ..
        id: archive_details

      - name: Upload Release Asset (Workflow Artifact)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-${{ env.TAG_NAME }}_package # Consistent naming for artifact bundle if desired
          path: ${{ github.event.repository.name }}-${{ env.TAG_NAME }}.tar.gz # Updated path


      # Optional: Create a GitHub Release and upload the asset
      # - name: Create Release
      #   uses: softprops/action-gh-release@v2
      #   with:
      #     files: ${{ github.event.repository.name }}-${{ env.TAG_NAME }}.tar.gz # Updated naming
      #     tag_name: ${{ github.ref }}
      #     name: Release ${{ github.ref_name }} # e.g., Release v1.0
      #     body: "Release notes for ${{ github.ref_name }}"
      #     draft: false
      #     prerelease: false
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
